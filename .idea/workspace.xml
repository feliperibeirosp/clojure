<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="ChangeListManager">
    <list default="true" id="85990880-d9ae-4b8d-a1c1-dd4db41de0ec" name="Default Changelist" comment="">
      <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/src/processing_with_clojure/core.clj" beforeDir="false" afterPath="$PROJECT_DIR$/src/processing_with_clojure/core.clj" afterDir="false" />
    </list>
    <option name="EXCLUDED_CONVERTED_TO_IGNORED" value="true" />
    <option name="SHOW_DIALOG" value="false" />
    <option name="HIGHLIGHT_CONFLICTS" value="true" />
    <option name="HIGHLIGHT_NON_ACTIVE_CHANGELIST" value="false" />
    <option name="LAST_RESOLUTION" value="IGNORE" />
  </component>
  <component name="FileEditorManager">
    <leaf SIDE_TABS_SIZE_LIMIT_KEY="300">
      <file pinned="false" current-in-tab="false">
        <entry file="file://$PROJECT_DIR$/project.clj">
          <provider selected="true" editor-type-id="text-editor" />
        </entry>
      </file>
      <file pinned="false" current-in-tab="true">
        <entry file="file://$PROJECT_DIR$/src/processing_with_clojure/core.clj">
          <provider selected="true" editor-type-id="text-editor">
            <state relative-caret-position="190">
              <caret line="67" lean-forward="true" selection-start-line="67" selection-end-line="67" />
            </state>
          </provider>
        </entry>
      </file>
    </leaf>
  </component>
  <component name="Git.Settings">
    <option name="RECENT_GIT_ROOT_PATH" value="$PROJECT_DIR$" />
  </component>
  <component name="IdeDocumentHistory">
    <option name="CHANGED_PATHS">
      <list>
        <option value="$PROJECT_DIR$/src/processing_with_clojure/core.clj" />
      </list>
    </option>
  </component>
  <component name="ProjectFrameBounds">
    <option name="x" value="838" />
    <option name="y" value="82" />
    <option name="width" value="861" />
    <option name="height" value="727" />
  </component>
  <component name="ProjectLevelVcsManager" settingsEditedManually="true" />
  <component name="ProjectView">
    <navigator proportions="" version="1">
      <foldersAlwaysOnTop value="true" />
    </navigator>
    <panes>
      <pane id="ProjectPane">
        <subPane>
          <expand>
            <path>
              <item name="processing-with-clojure" type="b2602c69:ProjectViewProjectNode" />
              <item name="processing-with-clojure" type="462c0819:PsiDirectoryNode" />
            </path>
            <path>
              <item name="processing-with-clojure" type="b2602c69:ProjectViewProjectNode" />
              <item name="processing-with-clojure" type="462c0819:PsiDirectoryNode" />
              <item name="src" type="462c0819:PsiDirectoryNode" />
            </path>
            <path>
              <item name="processing-with-clojure" type="b2602c69:ProjectViewProjectNode" />
              <item name="processing-with-clojure" type="462c0819:PsiDirectoryNode" />
              <item name="src" type="462c0819:PsiDirectoryNode" />
              <item name="processing_with_clojure" type="462c0819:PsiDirectoryNode" />
            </path>
            <path>
              <item name="processing-with-clojure" type="b2602c69:ProjectViewProjectNode" />
              <item name="processing-with-clojure" type="462c0819:PsiDirectoryNode" />
              <item name="test" type="462c0819:PsiDirectoryNode" />
            </path>
            <path>
              <item name="processing-with-clojure" type="b2602c69:ProjectViewProjectNode" />
              <item name="processing-with-clojure" type="462c0819:PsiDirectoryNode" />
              <item name="test" type="462c0819:PsiDirectoryNode" />
              <item name="processing_with_clojure" type="462c0819:PsiDirectoryNode" />
            </path>
          </expand>
          <select />
        </subPane>
      </pane>
      <pane id="PackagesPane" />
      <pane id="Scope" />
    </panes>
  </component>
  <component name="PropertiesComponent">
    <property name="com.android.tools.idea.instantapp.provision.ProvisionBeforeRunTaskProvider.myTimeStamp" value="1548119143964" />
    <property name="settings.editor.selected.configurable" value="Clojure.Compiler" />
  </component>
  <component name="ReplState" timestamp="1548119216866">{:repl-history {:ide [], :local [{:command &quot;(+ 5 2)&quot;, :offset 7, :ns &quot;processing-with-clojure.core&quot;} {:command &quot;(des)&quot;, :offset 5, :ns &quot;processing-with-clojure.core&quot;} {:command &quot;(def \n  soma [x y]\n  (+ x y))&quot;, :offset 29, :ns &quot;processing-with-clojure.core&quot;} {:command &quot;((defn soma\n  \&quot;docstring\&quot;\n   [x y]\n  (+ x y))&quot;, :offset 45, :ns &quot;processing-with-clojure.core&quot;} {:command &quot;(defn soma\n  \&quot;docstring\&quot;\n   [x y]\n  (+ x y)&quot;, :offset 43, :ns &quot;processing-with-clojure.core&quot;} {:command &quot;(soma 10 5)&quot;, :offset 11, :ns &quot;processing-with-clojure.core&quot;} {:command &quot;(soma 5 10)&quot;, :offset 10, :ns &quot;processing-with-clojure.core&quot;} {:command &quot;(nome)&quot;, :offset 5, :ns &quot;processing-with-clojure.core&quot;} {:command &quot;(pessoa)&quot;, :offset 7, :ns &quot;processing-with-clojure.core&quot;} {:command &quot;(person)&quot;, :offset 7, :ns &quot;processing-with-clojure.core&quot;} {:command &quot;(println person)&quot;, :offset 14, :ns &quot;processing-with-clojure.core&quot;} {:command &quot;(count listaAluno)&quot;, :offset 17, :ns &quot;processing-with-clojure.core&quot;} {:command &quot;(count listaAlunos)&quot;, :offset 18, :ns &quot;processing-with-clojure.core&quot;} {:command &quot;(filter (fn [aluno] (&gt; (get aluno :materia) 10)) listaAlunos)&quot;, :offset 60, :ns &quot;processing-with-clojure.core&quot;} {:command &quot;(filter ( (get aluno :materia) 10)) listaAlunos)\n&quot;, :offset 49, :ns &quot;processing-with-clojure.core&quot;} {:command &quot;(filter #(&gt; (:materia %&quot;, :offset 23, :ns &quot;processing-with-clojure.core&quot;} {:command &quot;(filter #(&gt; (:materia %) 6) listaAlunos)&quot;, :offset 40, :ns &quot;processing-with-clojure.core&quot;} {:command &quot;(filter #(&gt; (:nota %) 6) listaAlunos)&quot;, :offset 19, :ns &quot;processing-with-clojure.core&quot;} {:command &quot;(filter #(&gt; (:nota \n              %) 6) listaAlunos)&quot;, :offset 34, :ns &quot;processing-with-clojure.core&quot;} {:command &quot;(count (filtraMelhoresAlunos listaAlunos))&quot;, :offset 40, :ns &quot;processing-with-clojure.core&quot;} {:command &quot;(aluno \&quot;Mateus\&quot; \&quot;Artes\&quot;)&quot;, :offset 22, :ns &quot;processing-with-clojure.core&quot;} {:command &quot;(println (aluno \&quot;Mateus\&quot; \&quot;Artes\&quot;))&quot;, :offset 32, :ns &quot;processing-with-clojure.core&quot;} {:command &quot;(println (aluno \&quot;Mateus\&quot; \&quot;Artes\&quot;\n                ))&quot;, :offset 49, :ns &quot;processing-with-clojure.core&quot;} {:command &quot;(random-sample 10)&quot;, :offset 18, :ns &quot;processing-with-clojure.core&quot;} {:command &quot;(println (random-sample 10 10))&quot;, :offset 29, :ns &quot;processing-with-clojure.core&quot;} {:command &quot;(println (random-sample 10))&quot;, :offset 25, :ns &quot;processing-with-clojure.core&quot;} {:command &quot;(rand 100)&quot;, :offset 10, :ns &quot;processing-with-clojure.core&quot;} {:command &quot;(rand-int 5 10)&quot;, :offset 12, :ns &quot;processing-with-clojure.core&quot;} {:command &quot;(rand-int 10)&quot;, :offset 13} {:command &quot;(aluno \&quot;Mateus\&quot; \&quot;POrtugues\&quot;)&quot;, :offset 26, :ns &quot;processing-with-clojure.core&quot;} {:command &quot;(aluno)&quot;, :offset 5, :ns &quot;processing-with-clojure.core&quot;} {:command &quot;(novaListaAlunos 15)&quot;, :offset 20, :ns &quot;processing-with-clojure.core&quot;} {:command &quot;(count (novaListaAlunos 15))&quot;, :offset 28, :ns &quot;processing-with-clojure.core&quot;} {:command &quot;(novaListaAlunos 10)&quot;, :offset 20, :ns &quot;processing-with-clojure.core&quot;} {:command &quot;(def listaAlunosRandom (novaListaAlunos 10))&quot;, :offset 44, :ns &quot;processing-with-clojure.core&quot;} {:command &quot;(def listaAlunosRandom (lista (novaListaAlunos 10)))&quot;, :offset 49, :ns &quot;processing-with-clojure.core&quot;} {:command &quot;(def listaAlunosRandom (list (novaListaAlunos 10)))&quot;, :offset 28, :ns &quot;processing-with-clojure.core&quot;} {:command &quot;(filtraMelhoresAlunos listaAlunosRandom)&quot;, :offset 40, :ns &quot;processing-with-clojure.core&quot;} {:command &quot;(filtraMelhoresAlunos listaAlunos)&quot;, :offset 33, :ns &quot;processing-with-clojure.core&quot;} {:command &quot;'(listaAlunos)&quot;, :offset 1, :ns &quot;processing-with-clojure.core&quot;} {:command &quot;(newStudentsList 5 nameList subjectList)&quot;, :offset 40, :ns &quot;processing-with-clojure.core&quot;} {:command &quot;(bestStudentsFilter (newStudentsList 5 nameList subjectList))&quot;, :offset 48, :ns &quot;processing-with-clojure.core&quot;} {:command &quot;(newStudentsList 10 nameList subjectList)&quot;, :offset 41, :ns &quot;processing-with-clojure.core&quot;} {:command &quot;(bestStudentsFilter (newStudentsList 10 nameList subjectList))&quot;, :offset 40, :ns &quot;processing-with-clojure.core&quot;} {:command &quot;()&quot;, :offset 1} {:command &quot;(subjectFilter (newStudentsList 10 nameList subjectList) \&quot;Math\&quot;)&quot;, :offset 64, :ns &quot;processing-with-clojure.core&quot;} {:command &quot;(bestStudentsFilter (subjectFilter (newStudentsList nameList subjectList) \&quot;Music\&quot;))&quot;, :offset 80, :ns &quot;processing-with-clojure.core&quot;} {:command &quot;(bestStudentsFilter (subjectFilter (newStudentsList 15 nameList subjectList) \&quot;Music\&quot;))&quot;, :offset 55, :ns &quot;processing-with-clojure.core&quot;} {:command &quot;(addAluno listaAlunos nameList subjectList)&quot;, :offset 43, :ns &quot;processing-with-clojure.core&quot;} {:command &quot;(addAluno (newStudent nameList subjectList) listaAlunos\n          )&quot;, :offset 66, :ns &quot;processing-with-clojure.core&quot;} {:command &quot;(addAluno (newStudent nameList subjectList) listaAluno)&quot;, :offset 54, :ns &quot;processing-with-clojure.core&quot;} {:command &quot;(addAluno (newStudent nameList subjectList) listaAlunos)&quot;, :offset 56, :ns &quot;processing-with-clojure.core&quot;} {:command &quot;(listaAlunos)&quot;, :offset 12, :ns &quot;processing-with-clojure.core&quot;} {:command &quot;(println listaAlunos)&quot;, :offset 9, :ns &quot;processing-with-clojure.core&quot;} {:command &quot;(adicionaAluno (newStudent nameList subjectList) listaAlunos)&quot;, :offset 61, :ns &quot;processing-with-clojure.core&quot;} {:command &quot;(mesmoNome? (newStudent nameList subjectList) \&quot;Felipe\&quot;)&quot;, :offset 55, :ns &quot;processing-with-clojure.core&quot;} {:command &quot;(mesmoNome? (newStudent nameList subjectList) \&quot;Mary\&quot;)&quot;, :offset 53, :ns &quot;processing-with-clojure.core&quot;} {:command &quot;(filter #(mesmoNome? \&quot;Felipe\&quot; (:nome %)) listaAlunos)&quot;, :offset 43} {:command &quot;(filter #(mesmoNome? \&quot;mary\&quot; %) listaAlunos)&quot;, :offset 36, :ns &quot;processing-with-clojure.core&quot;} {:command &quot;(filter #(mesmoNome? \&quot;Felipe\&quot; %) listaAlunos)&quot;, :offset 28, :ns &quot;processing-with-clojure.core&quot;} {:command &quot;(filter #(mesmoNome? % \&quot;Felipe\&quot;) listaAlunos)&quot;, :offset 31, :ns &quot;processing-with-clojure.core&quot;} {:command &quot;(procuraNomeLista? \&quot;Felip2e\&quot; listaAlunos)&quot;, :offset 26, :ns &quot;processing-with-clojure.core&quot;} {:command &quot;(procuraNomeLista? \&quot;Felipe\&quot; listaAlunos)&quot;, :offset 25, :ns &quot;processing-with-clojure.core&quot;} {:command &quot;(listaVazia? (procuraNomeLista? \&quot;Felipe\&quot; listaAlunos))&quot;, :offset 54, :ns &quot;processing-with-clojure.core&quot;} {:command &quot;(def valor (procuraNomeLista? \&quot;Felipe\&quot; listaAlunos))&quot;, :offset 52, :ns &quot;processing-with-clojure.core&quot;} {:command &quot;(valor)&quot;, :offset 7, :ns &quot;processing-with-clojure.core&quot;} {:command &quot;(println valor)&quot;, :offset 15, :ns &quot;processing-with-clojure.core&quot;} {:command &quot;(def x (fn-mesmoNome? \&quot;Felipe\&quot;))&quot;, :offset 32, :ns &quot;processing-with-clojure.core&quot;} {:command &quot;(buscaPorCriterio \&quot;Felipe\&quot; listaAlunos)&quot;, :offset 39, :ns &quot;processing-with-clojure.core&quot;} {:command &quot;(buscaPorCriterio \&quot;Felipe2\&quot; listaAlunos)&quot;, :offset 26, :ns &quot;processing-with-clojure.core&quot;} {:command &quot;(def x  (buscaPorCriterio \&quot;Felipe2\&quot; listaAlunos))&quot;, :offset 49, :ns &quot;processing-with-clojure.core&quot;} {:command &quot;(x)&quot;, :offset 3, :ns &quot;processing-with-clojure.core&quot;} {:command &quot;(x listaAlunos)&quot;, :offset 15, :ns &quot;processing-with-clojure.core&quot;}], :remote []}}</component>
  <component name="RunDashboard">
    <option name="ruleStates">
      <list>
        <RuleState>
          <option name="name" value="ConfigurationTypeDashboardGroupingRule" />
        </RuleState>
        <RuleState>
          <option name="name" value="StatusDashboardGroupingRule" />
        </RuleState>
      </list>
    </option>
  </component>
  <component name="RunManager" selected="Clojure REPL.REPL for processing-with-clojure">
    <configuration name="REPL for processing-with-clojure" type="ClojureREPL" factoryName="Local" activateToolWindowBeforeRun="false">
      <module name="processing-with-clojure" />
      <setting name="replType" value="NREPL" />
      <setting name="execution" value="LEININGEN" />
      <setting name="jvmArgs" value="" />
      <setting name="parameters" value="" />
      <setting name="workingDir" value="$PROJECT_DIR$" />
      <setting name="profiles" value="" />
      <setting name="aliases" value="" />
      <method v="2" />
    </configuration>
    <configuration default="true" type="ClojureREPL" factoryName="Local" activateToolWindowBeforeRun="false">
      <setting name="replType" value="NREPL" />
      <setting name="execution" value="LEININGEN" />
      <module name="" />
      <setting name="jvmArgs" value="" />
      <setting name="parameters" value="" />
      <setting name="workingDir" value="" />
      <setting name="profiles" value="" />
      <setting name="aliases" value="" />
      <method v="2" />
    </configuration>
    <configuration default="true" type="ClojureREPL" factoryName="Remote" activateToolWindowBeforeRun="false">
      <setting name="host" value="" />
      <setting name="port" value="0" />
      <setting name="replType" value="0" />
      <module name="" />
      <method v="2" />
    </configuration>
    <configuration name="core" type="ClojureScriptRunConfiguration" factoryName="Clojure Script" temporary="true">
      <module name="processing-with-clojure" />
      <setting name="path" value="$PROJECT_DIR$/src/processing_with_clojure/core.clj" />
      <setting name="namespace" value="" />
      <setting name="execution" value="INTELLIJ" />
      <setting name="profiles" value="" />
      <setting name="aliases" value="" />
      <setting name="vmparams" value="" />
      <setting name="params" value="" />
      <setting name="workDir" value="$PROJECT_DIR$/src/processing_with_clojure" />
      <method v="2" />
    </configuration>
    <configuration name="processing-with-clojure.core" type="ClojureScriptRunConfiguration" factoryName="Clojure Script" temporary="true">
      <module name="processing-with-clojure" />
      <setting name="path" value="$PROJECT_DIR$/src/processing_with_clojure/core.clj" />
      <setting name="namespace" value="" />
      <setting name="execution" value="INTELLIJ" />
      <setting name="profiles" value="" />
      <setting name="aliases" value="" />
      <setting name="vmparams" value="" />
      <setting name="params" value="" />
      <setting name="workDir" value="$PROJECT_DIR$/src/processing_with_clojure" />
      <method v="2" />
    </configuration>
    <recent_temporary>
      <list>
        <item itemvalue="Clojure Application.core" />
        <item itemvalue="Clojure Application.processing-with-clojure.core" />
      </list>
    </recent_temporary>
  </component>
  <component name="SvnConfiguration">
    <configuration />
  </component>
  <component name="TaskManager">
    <task active="true" id="Default" summary="Default task">
      <changelist id="85990880-d9ae-4b8d-a1c1-dd4db41de0ec" name="Default Changelist" comment="" />
      <created>1547998354397</created>
      <option name="number" value="Default" />
      <option name="presentableId" value="Default" />
      <updated>1547998354397</updated>
    </task>
    <servers />
  </component>
  <component name="ToolWindowManager">
    <frame x="838" y="82" width="861" height="727" extended-state="0" />
    <editor active="true" />
    <layout>
      <window_info content_ui="combo" id="Project" order="0" weight="0.9169719" />
      <window_info id="Structure" order="1" side_tool="true" weight="0.25" />
      <window_info id="Image Layers" order="2" />
      <window_info id="Designer" order="3" />
      <window_info id="UI Designer" order="4" />
      <window_info id="Capture Tool" order="5" />
      <window_info id="Favorites" order="6" side_tool="true" />
      <window_info anchor="bottom" id="Version Control" order="0" />
      <window_info anchor="bottom" id="Terminal" order="1" />
      <window_info anchor="bottom" id="Event Log" order="2" side_tool="true" />
      <window_info anchor="bottom" id="Messages" order="3" />
      <window_info anchor="bottom" id="Message" order="4" />
      <window_info anchor="bottom" id="Find" order="5" />
      <window_info anchor="bottom" id="Run" order="6" sideWeight="0.49917173" weight="0.47567567" />
      <window_info anchor="bottom" id="Debug" order="7" weight="0.4" />
      <window_info anchor="bottom" id="Cvs" order="8" weight="0.25" />
      <window_info anchor="bottom" id="Inspection" order="9" weight="0.4" />
      <window_info anchor="bottom" id="TODO" order="10" />
      <window_info active="true" anchor="bottom" id="REPL" order="11" sideWeight="0.50082827" side_tool="true" visible="true" weight="0.5225376" />
      <window_info anchor="right" id="Palette" order="0" />
      <window_info anchor="right" id="Theme Preview" order="1" />
      <window_info anchor="right" id="Maven" order="2" />
      <window_info anchor="right" id="Leiningen" order="3" />
      <window_info anchor="right" id="Capture Analysis" order="4" />
      <window_info anchor="right" id="Palette&#9;" order="5" />
      <window_info anchor="right" id="Commander" internal_type="SLIDING" order="6" type="SLIDING" weight="0.4" />
      <window_info anchor="right" id="Ant Build" order="7" weight="0.25" />
      <window_info anchor="right" content_ui="combo" id="Hierarchy" order="8" weight="0.25" />
    </layout>
  </component>
  <component name="editorHistoryManager">
    <entry file="file://$PROJECT_DIR$/project.clj">
      <provider selected="true" editor-type-id="text-editor" />
    </entry>
    <entry file="file://$PROJECT_DIR$/src/processing_with_clojure/core.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="190">
          <caret line="67" lean-forward="true" selection-start-line="67" selection-end-line="67" />
        </state>
      </provider>
    </entry>
  </component>
  <component name="masterDetails">
    <states>
      <state key="ProjectJDKs.UI">
        <settings>
          <splitter-proportions>
            <option name="proportions">
              <list>
                <option value="0.2" />
              </list>
            </option>
          </splitter-proportions>
        </settings>
      </state>
    </states>
  </component>
</project>